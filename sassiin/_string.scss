/// Sassiin
///
/// @copyright   Copyright 2015, Lauri Tunnela
/// @license     http://tunne.la/MIT.txt The MIT License

@charset "UTF-8";

$unicode-chars: 
"" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""
"" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""
" " "!" "\"" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/"
"0" "1" "2" "3" "4" "5" "6" "7" "8" "9" ":" ";" "<" "=" ">" "?"
"@" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O"
"P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "[" "\\" "]" "^" "_"
"`" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o"
"p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "x" "{" "|" "}" "~" "";

/// @group String
///
/// @parameter $string
/// @parameter $length
/// @parameter {string} $pad-with [" "]
/// @parameter {string} $pad-type [right]
///
/// @requires {function} str-repeat
@function str-pad($string, $length, $pad-with: " ", $pad-type: right) {
  $str-length: str-length($string);

  @if $str-length >= $length {
    @return $string;
  }
  $left: 0;
  $right: 0;

  @if $pad-type == left {
    $left: $length - $str-length;
  } @else if $pad-type == right {
    $right: $length - $str-length;
  } @else if $pad-type == both {
    $both: ($length - $str-length);
    $left: $both - floor($both / 2);
    $right: $both - $left;
  }
  @return str-repeat($pad-with, $left) + $string + str-repeat($pad-with, $right);
}

/// @group String
///
/// @parameter $string
/// @parameter $search
/// @parameter $replace ['']
///
/// @requires {function} str-replace
/// @requires {function} types
@function str-replace($string, $search, $replace: '') {
  @if types($string $search $replace) == (string string string) {
    $index: str-index($string, $search);

    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
  } @else if types($string $search $replace) == (string list string) {
    @for $i from 1 through length($search) {
      $string: str-replace($string, nth($search, $i), $replace);
    }
  } @else if types($string $search $replace) == (string list list) && length($search) == length($replace) {
    @for $i from 1 through length($search) {
      $string: str-replace($string, nth($search, $i), nth($replace, $i));
    }
  }
  @return $string;
}

/// @group String
///
/// @parameter $str
/// @parameter $remove [(" " "." "_" "+" "~" "#" "(" ")" ":")]
///
/// @requires {function} str-replace
@function slugify($str, $remove: (" " "." "_" "+" "~" "#" "(" ")" ":")) {
  @return str-replace(str-replace($str, " ", ""), $remove, "-");
}

/// @group String
///
/// @parameter $left
/// @parameter $right
///
/// @requires {function} char-compare
/// @requires {function} min
@function str-compare($left, $right) {
  $left: "" + $left;
  $right: "" + $right;
  $left-length: str-length($left);
  $right-length: str-length($right);
  $min-length: min($left-length, $right-length);
  
  @for $n from 1 through $min-length {
    $compare: char-compare(str-slice($left, $n, $n), str-slice($right, $n, $n));

    @if $compare < 0 {
      @return -1;
    }
    @if $compare > 0 {
      @return 1;
    }
  }
  @if $left-length < $right-length {
    @return -1;
  } @else if $left-length > $right-length {
    @return 1;
  }
  @return 0;
}

/// @group String
@function str-repeat($str, $n) {
  $repeated-str: "";

  @for $i from 0 to $n {
    $repeated-str: $repeated-str + $str;
  }
  @return $repeated-str;
}

/// @group String
@function lowercase-alphabets() {
  @return "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l"
  "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z";
}

/// @group String
@function uppercase-alphabets() {
  @return "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" 
  "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z";
}

/// @group String
///
/// @requires {function} lowercase-alphabets
/// @requires {function} uppercase-alphabets
@function alphabets() {
  @return join(lowercase-alphabets(), uppercase-alphabets());
}

/// @group String
@function numbers() {
  @return "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
}

/// @group String
///
/// @requires {function} alphabets
/// @requires {function} numbers
@function alphanumeric() {
  @return join(numbers(), alphabets());
}

/// @group String
///
/// @parameter $left
/// @parameter $right
///
/// @requires {function} alphanumeric
@function char-compare($left, $right) {
  $list: join(" ", alphanumeric());

  $left: "" + $left;
  $right: "" + $right;
  $left-index: index($list, $left);
  $right-index: index($list, $right);

  @if not $left-index {
    $left-index: length($list) + 1;
  }
  @if not $right-index {
    $right-index: length($list) + 1;
  }
  @if $left-index == $right-index {
    @return 0;
  }
  @if $left-index < $right-index {
    @return -1;
  }
  @if $left-index > $right-index {
    @return 1;
  }
}

/// @group String
///
/// @parameter {arglist} $args...
///
/// @requires {function} str-reverse
///
/// @throws str-reverse() expects 1 parameter, #{$argc} given
/// @throws str-reverse() expects parameter 1 to be a string, #{$str-type} given
@function str-reverse($args...) {
  $argc: length($args);

  @if $argc != 1 {
    @error "str-reverse() expects 1 parameter, #{$argc} given";
  }
  $str: nth($args, 1);
  $str-type: type-of($str);

  @if $str-type != string {
    @error "str-reverse() expects parameter 1 to be a string, #{$str-type} given";
  }
  $str-length: str-length($str);
  $flipped-str: "";

  @for $n from 1 through $str-length {
    $flipped-str: str-slice($str, $n, $n) + $flipped-str;
  }
  @return $flipped-str;
}

/// @group String
///
/// @parameter {arglist} $args...
///
/// @requires {function} char-at
///
/// @throws char-at() expects 2 parameters, #{$argc} given
/// @throws char-at() expects parameter 1 to be a string, #{$str-type} given
/// @throws char-at() expects parameter 2 to be a number, #{$index-type} given
@function char-at($args...) {
  $argc: length($args);

  @if $argc != 2 {
    @error "char-at() expects 2 parameters, #{$argc} given";
  }
  $str: nth($args, 1);
  $str-type: type-of($str);

  @if $str-type != string {
    @error "char-at() expects parameter 1 to be a string, #{$str-type} given";
  }
  $index: nth($args, 2);
  $index-type: type-of($index);

  @if $index-type != number {
    @error "char-at() expects parameter 2 to be a number, #{$index-type} given";
  }
  @return str-slice($str, $index, $index);
}

/// @group String
///
/// @parameter {arglist} $args...
///
/// @requires {function} char-code
///
/// @throws char-code() expects only 1 parameter, #{$argc} given
/// @throws char-code() expects parameter 1 to be a string, #{$char-type} given
@function char-code($args...) {
  $argc: length($args);

  @if $argc != 1 {
    @error "char-code() expects only 1 parameter, #{$argc} given";
  }
  $char: nth($args, 1);
  $char-type: type-of($char);

  @if $char-type != string {
    @error "char-code() expects parameter 1 to be a string, #{$char-type} given";
  }
  @return index($unicode-chars, $char) - 1;
}

/// @group String
///
/// @parameter $str
@function unicode($str) {
  @return unquote("\"") + $str + unquote("\"");
}

/// @group String
///
/// @parameter $variable
/// @parameter {boolean} $sub-list [false]
/// @parameter {string} $separator [" "]
///
/// @requires {function} list-to-string
/// @requires {function} variable-to-string
@function variable-to-string($variable, $sub-list: false, $separator: " ") {
  $str: "";
  $type: type-of($variable);
  $new-separator: if($separator == " ", ", ", " ");

  @if $type == list {
    $items: ();
    $str: if($sub-list, "(", ""); 

    @each $item in $variable {
      $items: append($items, variable-to-string($item, true));
    }
    $str: $str + list-to-string($items, $separator) + if($sub-list, ")", ""); 
  } @else if $type == map {
    $items: ();
    $str: "("; 

    @each $key, $item in $variable {
      $items: append($items, "" + variable-to-string($key) + ": " + variable-to-string($item));
    }
    $str: $str + list-to-string($items, $new-separator) + ")"; 
  } @else if $type == string {
    $str: "\"" + $variable + "\"";
  } @else if $type == "null" {
    $str: "null"; 
  } @else {
    $str: "" + $variable; 
  }
  @return $str;
}